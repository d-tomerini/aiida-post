--- ## List of options for our query to the program. # item is an alternative key/value

calculation: 
  band_gap
  #relax
 # all other property we can think of, or use
 # will be removed/superseded by the endpoint request
structure:
  # here goes all the information we need about the structure
  # will need to be either:
  #  - an actual structure file
  #  - contain information on how to build such structure
  #  - be a queryable quantity
  structure_type: 
    from_database # probaby the one we'll end up using for now
    #cif
    #tcod?
    #xyz
    #descriptive # ? something that needs to be specific, yet generic. Tricky
    #ase # a structure format used by ASE and understood by aiida
    #aiida uuid/id # keep it simple if you already know a node stored with the required characteristics
    # more?
  database: # if queryable database, al info should go here
    COD # specific to this database for now? 
        # if more databases, maybe a list of where to search
        # otherwise search everything I have?
    #ICSD
    #other
  query:  
    # supported keywords from COD. Could be anything, we can sort out the useless ones
    # one or more, if it gets one structure
    # if multiple databases, one can have specific keys to be sorted out
    chemical_name: 
      wurtzite
    formula: 
      C7 H14 O2 Re 14 ### Hill Notation. Carbon, hydrogens, then all elements in alphabetical order
    id: 
      1000000 # entry identifier for the COD database
    spacegroup:
      P1
    element:
      # list of elements
      - C
      - H 
      - O
      - Re  
    ## plenty of others key:value available. From verdi shell:
    #    from aiida.tools.dbimporters.plugins.cod import CodDbImporter
    #    qb = CodDbImporter
    #    qb.get_supported_keywords()
    # Of course ID is the 'univoque' one, but need to be searched in advance!
  strict: 
    false # do we want to accept the result if the query return more than 1 structure?
        
        