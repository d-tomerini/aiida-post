.. workflows:

********************
Adding new workflows
********************

There is no general limitation on what AiiDA workflow can be used to run a calculation: as long as a workflow is
accessible by AiiDA is accessible by the app itself by the way of its entrypoint.

The property mapping is provided in order to guarantee that a user has a direct understanding of what
property they will end up calculating, and an easier way to retrieve the data, i.e. what key of which output to
query to obtain the desired value.

The AiiDA entrypoint list
=========================

The AiiDA plugin system provides access to classes generated by other packages (plugins) with the entry point system;
this is a way to advertise classes from one package to another and provide an easy way to access them.

The ``verdi plugin list`` command is a way to list all the entry point available to AiiDA: amog those, for example ::

    Info: Available entry point groups:
    * aiida.cmdline.data
    * aiida.calculations
    * aiida.data
    * aiida.node
    * aiida.parsers
    * aiida.schedulers
    * aiida.tools.dbexporters
    * aiida.tools.dbimporters
    * aiida.transports
    * aiida.workflows

We will deal only with the workflows (you can find more information on the relevnt
`AiiDA webpage <https://aiida-core.readthedocs.io/en/latest/developer_guide/plugins/entry_points.html>`_

Package entry points can be found in the ``setup.json`` in a package, or can be added with the reentry package.

Importing workflows
===================

The easiest way to import new workflow is to install an AiiDA plugin that defines a workflow itself.
`This page <https://aiidateam.github.io/aiida-registry/>`_ provides an up-to-date list of the
public plugins available (more private ones exist -- like this one).

After installing a plugin that contains a workflow definition and running the ``reentry scan`` command,
the ``verdi plugin list aiida.workflow`` should contain new plugins. For example, after we install a first
plugin, e.g. the ``aiida-codtools`` plugin, running the command should return::

    $ pip install aiida-codtools
    ... installation ...
    $ reentry scan
    $ verdi plugin list aiida.workflows
    Registered entry points for aiida.workflows:
    * codtools.cif_clean

Where the ``codtools.cif_clean`` is a workflow we can use, once we install the code necessary to run it. Note that
this workflow is NOT available to the app until we difine a MAPPING_PROPERTIES entry in the configuration file, but can be
run through AiiDA directly!

Writing a  workflow
===================

Of course, it is possible to write a workflow (see
`here to start <https://aiida.readthedocs.io/projects/aiida-core/en/latest/concepts/workflows.html>`_),
but it is necessary to advertise its position.
A possible way to do so is to add a worrkflow file to the ``aiida-post/workflows`` directory
and modify the ``setup.json`` file in the aiida-post directory, to include it.

Example
+++++++

Let's say you add the file ``myworkflow.py`` in the workflow directory, and write a workflow that begins with ::


    from aiida.engine import WorkChain, ToContext

    class MyWorkChain(WorkChain):
        """
        My workflow to calculate my property called MYPROPERTY
        """
        @classmethod
        def define(cls, spec):
            super(MyWorkChain, cls).define(spec)
            #inputs
            spec.input('code', valid_type=orm.Code)
            # continues workflow definition

After writing it, we need to make it available to AiiDA; we can add one last line to setup.json file in
the definitions of the aiida workflows:

.. code-block:: json

    {
        "aiida.workflows":[
            "post.CODImport = aiida_post.workflows.COD_import:CODImportWorkChain",
            "post.BandGap = aiida_post.workflows.bandgap:PwBandGapWorkChain",
            "post.MYPROPERTY = aiida_post.workflows.myworkflow:MyWorkChain"
        ]
    }

The added last line provide a string name to refer to the new endpoint, that is recognised by its position;
look inside the aiida_post package, into the directory (separated by a .) and finally to the file and the
class (separated by :). That's it.

Now, inside the ``common/config.py`` file you need to advertise that the property ``MYPROPERTY`` is associated
with the endpoint ``post.MYPROPERTY`` by filling the PROPERTY_MAPPING dictionary.

